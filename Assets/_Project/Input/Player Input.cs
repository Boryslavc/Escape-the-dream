//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Core
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""0bc0735b-843c-481a-920c-f1f3ad0aaf62"",
            ""actions"": [
                {
                    ""name"": ""Position Tracker"",
                    ""type"": ""Value"",
                    ""id"": ""00e66381-1afe-43c4-8b46-8ea7e82a7050"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spell Cast"",
                    ""type"": ""Button"",
                    ""id"": ""af807bc5-7bc7-4520-ba41-311ab5d3f27f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Spell Type"",
                    ""type"": ""Button"",
                    ""id"": ""8ef2a7de-a1d8-4c02-b9d8-078e74bfcdb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49284fbc-868e-459f-abe1-7f83e07c47b0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position Tracker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5293d1b-e21c-415f-b930-afd3dac797f9"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position Tracker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f4c2e8c-ac46-47fa-b2b1-bef2f3d906ee"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position Tracker"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""514c53aa-a5dc-4b1a-93f8-b8fe34e95067"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eb4dfca-a3c3-49fd-a34f-8ec54b43b978"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb6164cb-d5c3-4f53-b0fb-9c38b8505038"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Spell Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""072e83fa-5e08-4ec8-9ad6-6e6182922e1a"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Spell Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_PositionTracker = m_Base.FindAction("Position Tracker", throwIfNotFound: true);
            m_Base_SpellCast = m_Base.FindAction("Spell Cast", throwIfNotFound: true);
            m_Base_ChangeSpellType = m_Base.FindAction("Change Spell Type", throwIfNotFound: true);
        }

        ~@PlayerInput()
        {
            UnityEngine.Debug.Assert(!m_Base.enabled, "This will cause a leak and performance issues, PlayerInput.Base.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base
        private readonly InputActionMap m_Base;
        private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
        private readonly InputAction m_Base_PositionTracker;
        private readonly InputAction m_Base_SpellCast;
        private readonly InputAction m_Base_ChangeSpellType;
        public struct BaseActions
        {
            private @PlayerInput m_Wrapper;
            public BaseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PositionTracker => m_Wrapper.m_Base_PositionTracker;
            public InputAction @SpellCast => m_Wrapper.m_Base_SpellCast;
            public InputAction @ChangeSpellType => m_Wrapper.m_Base_ChangeSpellType;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void AddCallbacks(IBaseActions instance)
            {
                if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
                @PositionTracker.started += instance.OnPositionTracker;
                @PositionTracker.performed += instance.OnPositionTracker;
                @PositionTracker.canceled += instance.OnPositionTracker;
                @SpellCast.started += instance.OnSpellCast;
                @SpellCast.performed += instance.OnSpellCast;
                @SpellCast.canceled += instance.OnSpellCast;
                @ChangeSpellType.started += instance.OnChangeSpellType;
                @ChangeSpellType.performed += instance.OnChangeSpellType;
                @ChangeSpellType.canceled += instance.OnChangeSpellType;
            }

            private void UnregisterCallbacks(IBaseActions instance)
            {
                @PositionTracker.started -= instance.OnPositionTracker;
                @PositionTracker.performed -= instance.OnPositionTracker;
                @PositionTracker.canceled -= instance.OnPositionTracker;
                @SpellCast.started -= instance.OnSpellCast;
                @SpellCast.performed -= instance.OnSpellCast;
                @SpellCast.canceled -= instance.OnSpellCast;
                @ChangeSpellType.started -= instance.OnChangeSpellType;
                @ChangeSpellType.performed -= instance.OnChangeSpellType;
                @ChangeSpellType.canceled -= instance.OnChangeSpellType;
            }

            public void RemoveCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBaseActions instance)
            {
                foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BaseActions @Base => new BaseActions(this);
        public interface IBaseActions
        {
            void OnPositionTracker(InputAction.CallbackContext context);
            void OnSpellCast(InputAction.CallbackContext context);
            void OnChangeSpellType(InputAction.CallbackContext context);
        }
    }
}
